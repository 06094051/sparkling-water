description = "Sparkling Water Examples"

dependencies {
  // Sparkling Water Core
  compile( project(":sparkling-water-core") ) { 
    exclude group: "javax.servlet", module: "servlet-api"
  }

  // And Scala library
  compile "org.scala-lang:scala-library:${scalaVersion}"

  // And use scalatest for Scala testing
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2.2.1"
  testCompile "junit:junit:4.11"

  // Integration tests requirements
  integTestCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2.2.1"
  integTestCompile "junit:junit:4.11"

  // To enable Idea compiler even for integTestCode which use mllib
  /*integTestCompile*/ compile "org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}"

  // Put Spark Assembly on runtime path
  integTestRuntime fileTree(dir: new File((String) sparkHome, "lib/"), include: 'spark*.jar' )
}

//
// Setup integration tests environment
//
artifacts {
  integTestAssembly jar
  // No tests for examples
  //integTestAssembly testJar
  integTestAssembly integTestJar

  // pull selected dependencies
  dep(testDependencies).each {
    integTestAssembly it
  }
}

integTest {
  systemProperty "spark.testing",   "true"

  systemProperty "spark.test.home", "${sparkHome}"
  // Pass list of jars required for testing
  systemProperty "sparkling.test.assembly", "${configurations.integTestAssembly.artifacts.file.join(',')}"
  systemProperty "sparkling.test.jar", "${integTestJar.archivePath}"

  // Run with assertions ON
  enableAssertions = true

  // For a new JVM for each test class
  forkEvery = 1
}

/**
 * Find dependencies from 'configuration.runtime' matching given specification.
 *
 * Specification is given in form group_name:module_name
 *
 * @param d list of specifications.
 * @return
 */
public FileCollection dep(List<String> d) {
  Configuration conf = configurations.runtime
  List<String[]> depsSpec = d.collect { it.split(":")}
  Set<ResolvedDependency> toInclude = []
  resolve(conf.resolvedConfiguration.firstLevelModuleDependencies, toInclude, depsSpec)
  files( toInclude.collect {
    it.moduleArtifacts*.file
  }.flatten())
}

void resolve(Set<ResolvedDependency> deps, Set<ResolvedDependency> includeDeps, List<String[]> depsSpec) {
  deps.each { d->
    if (depsSpec.any { ds -> d.moduleGroup==ds[0] && d.moduleName==ds[1] })
      if (includeDeps.add(d)) {
        resolve(d.children, includeDeps, depsSpec)
      }
  }
}


