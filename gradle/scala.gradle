apply plugin: 'scala'

// Specify properties
project.ext {
  scalaBinaryVersion = '2.10'
  scalaVersion = '2.10.4'
}

// Activate Zinc compiler and configure scalac
tasks.withType(ScalaCompile) {
    scalaCompileOptions.useCompileDaemon = false
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.additionalParameters = ['-target:jvm-1.6']
}

jar {
  baseName = "${project.name}_${scalaBinaryVersion}"
}

// Create jar
task testJar(type: Jar, dependsOn: testClasses) {
    group = "Build"
    description = "Assembles a jar archive with test classes."
    baseName = "${project.name}_${scalaBinaryVersion}"
    appendix = 'test'
    from sourceSets.test.output
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'scaladoc'
    from scaladoc
}

// Create a configuration containing only for test artifacts
configurations {
    testArchives
}

// Explicitly
artifacts {
    testArchives testJar
    archives scaladocJar
}

/* To enable scalatest Runner insteadof using JUnitRunner
// buildscript: classpath 'com.github.maiflai:gradle-scalatest:0.4'
// Enable scalatests
//apply plugin: 'scalatest'

dependencies {
    testRuntime 'org.pegdown:pegdown:1.1.0'
}
*/

test {
    maxParallelForks = 1
}

// Enable scalastyle
apply from: "$rootDir/gradle/scalastyle.gradle"


/*

task scalaTest(dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: sourceSets.test.runtimeClasspath.asPath
    )
    ant.scalatest(runpath: sourceSets.test.compileClasspath,
            fork: 'false',
            haltonfailure: 'true',
            suite: 'TranslatorTest')
            { reporter(type: 'stdout') }
}
 */

